<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>пост 1 | Д.Латыпова</title>
    <link>https://example.com/ru/category/%D0%BF%D0%BE%D1%81%D1%82-1/</link>
      <atom:link href="https://example.com/ru/category/%D0%BF%D0%BE%D1%81%D1%82-1/index.xml" rel="self" type="application/rss+xml" />
    <description>пост 1</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>пост 1</title>
      <link>https://example.com/ru/category/%D0%BF%D0%BE%D1%81%D1%82-1/</link>
    </image>
    
    <item>
      <title>Моя 1 прошедшая неделя</title>
      <link>https://example.com/ru/post/my_last_week/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/my_last_week/</guid>
      <description>&lt;h2 id=&#34;начало&#34;&gt;Начало&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Моя прошлая неделя пролетела незаметно. На протяжении почти всей недели я разбиралась с Операционными системами и Компьютерным практикумом по ИТ. За прошедшую неделю я выполнила две лабораторных работы и 1 этап индивидуального проекта по Операционным системам, а также лабораторную работу по Компьютерному практикуму по ИТ.&lt;/p&gt;
&lt;p&gt;Та неделя прошла весело, потому что во время установки второй операционной системы (Linux) на мой ноутбук, мне нечаянно снесли Windows. Успокаивало лишь то, что там не было особо важных документов, так как я его переустановила перед началом учебы. Из-за этой оплошности, пришлось все заново устанавливать.&lt;/p&gt;
&lt;p&gt;Как я уже раннее сказала, я выполнила лабораторные работы №3 и №4, 1 этап индивидуального проекта по ОС.  В процессе выполнения  лабораторной работы №3 я научилась оформлять отчёты с помощью легковесного языка разметки Markdown. Нужно было сделать отчет в формате Markdown по лабораторной работе №2, это оказалось не очень сложно. А в результате выполнения  лабораторной работы №4 я научилась работать в Терминале, приобрела практические навыки взаимодействия пользователя с системой посредством командной строки.&lt;/p&gt;
&lt;p&gt;Также было интересно выполнять лабораторную работу по Компьютерному практикуму по ИТ. Там я изучаю язык программирования Arduino.  На протяжении всего модуля мы будем выполнять лабораторные работы по робототехнике с применением микроконтроллера Arduino.&lt;/p&gt;
&lt;p&gt;В общем, моя прошедшая неделя была довольно-таки продуктивной и занимательной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git</title>
      <link>https://example.com/ru/post/git/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/git/</guid>
      <description>&lt;h2 id=&#34;вступление&#34;&gt;Вступление&lt;/h2&gt;
&lt;p&gt;В последние годы популярность git демонстрирует взрывной рост. Эта система контроля версий используется различными проектами с открытым исходным кодом. Можно начать с изучения наиболее часто используемых команд, и после этого постепенно расширять свои знания. Именно так мы и поступим в этой статье.&lt;/p&gt;
&lt;h2 id=&#34;что-такое-git&#34;&gt;Что такое Git?&lt;/h2&gt;
&lt;p&gt;GIT — распределённая система управления версиями, созданная Линусом Торвальдсом для управления разработкой ядра Linux и в настоящее время получившая очень широкое распространение в среде разработчиков программного обеспечения. У Git две основных задачи: первая — хранить информацию обо всех изменениях в вашем коде, начиная с самой первой строчки, а вторая — обеспечение удобства командной работы над кодом.&lt;/p&gt;
&lt;h2 id=&#34;что-такое-система-управления-версиями&#34;&gt;Что такое Система управления версиями?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Система управления версиями (Version Control System, VCS)&lt;/strong&gt; — это программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое. Такие системы наиболее широко используются при разработке программного обеспечения для хранения исходных кодов разрабатываемой программы.&lt;/p&gt;
&lt;p&gt;Программное обеспечение контроля версий отслеживает все вносимые в код изменения в специальной базе данных. При обнаружении ошибки разработчики могут вернуться назад и выполнить сравнение с более ранними версиями кода для исправления ошибок, сводя к минимуму проблемы для всех участников команды.&lt;/p&gt;
&lt;h2 id=&#34;централизованные-системы-контроля-версий&#34;&gt;Централизованные системы контроля версий&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Централизованные системы контроля версий&lt;/strong&gt; представляют собой приложения типа клиент-сервер, когда репозиторий проекта существует в единственном экземпляре и хранится на сервере. Доступ к нему осуществлялся через специальное клиентское приложение.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVS (Concurrent Versions System, Система одновременных версий)&lt;/strong&gt; одна из первых систем получивших широкое распространение среди разработчиков, она возникла в конце 80-х годов прошлого века. В настоящее время этот продукт не развивается, это в первую очередь связано с рядом ключевых недостатков, таких как невозможность переименования файлов, неэффективное их хранение, практически полное отсутствие контроля целостности.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Subversion (SVN)&lt;/strong&gt; – система контроля версий, созданная на замену CVS. SVN была разработана в 2004 году и до сих пор используется. Несмотря на многие преимущества по сравнению с CVS у SVN все-таки есть недостатки, такие как проблемы с переименованием, невозможность удаления данных из хранилища, проблемы в операции слияния ветвей и т.д. В целом SVN был (и остается) значительным шагом вперед по сравнению с CVS.&lt;/p&gt;
&lt;h2 id=&#34;распределенные-системы-контроля-версий&#34;&gt;Распределенные системы контроля версий&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Распределенные системы контроля версий (Distributed Version Control System, DVCS)&lt;/strong&gt; позволяют хранить репозиторий (его копию) у каждого разработчика, работающего с данной системой. При этом можно выделить центральный репозиторий (условно), в который будут отправляться изменения из локальных и, с ним же эти локальные репозитории будут синхронизироваться. При работе с такой системой, пользователи периодически синхронизируют свои локальные репозитории с центральным и работают непосредственно со своей локальной копией. После внесения достаточного количества изменений в локальную копию они (изменения) отправляются на сервер. При этом сервер, чаще всего, выбирается условно, так как в большинстве DVCS нет такого понятия как “выделенный сервер с центральным репозиторием”.
Git-хостинг&lt;/p&gt;
&lt;p&gt;Ряд сервисов предоставляют хостинг для git-репозиториев, среди наиболее известных— GitHub, Codebase, SourceForge, SourceHut, Gitea, Bitbucket, GitLab.&lt;/p&gt;
&lt;h2 id=&#34;что-такое-ssh-ключ-и-зачем-он-нужен&#34;&gt;Что такое SSH-ключ и зачем он нужен?&lt;/h2&gt;
&lt;p&gt;Чтобы работать со своего компьютера с GitHub, иметь доступ к проектам, хранящимся на сервисе, выполнять команды в консоли без постоянного подтверждения пароля, нужно пройти авторизацию у сервера. В этом помогают SSH-ключи.&lt;/p&gt;
&lt;p&gt;Каждый SSH-ключ содержит пару: открытый (публичный) и закрытый (приватный) ключ. Открытый ключ отправляется на сервер, его можно не прятать от всех и не переживать, что кто-то его увидит и украдёт. Он бесполезен без своей пары — закрытого ключа. А вот закрытый ключ — секретная часть. Доступ к нему должен быть только у вас.&lt;/p&gt;
&lt;h2 id=&#34;основные-команды-git&#34;&gt;Основные команды git&lt;/h2&gt;
&lt;p&gt;Команда &lt;strong&gt;git add&lt;/strong&gt; добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git status&lt;/strong&gt; показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git diff&lt;/strong&gt; используется для вычисления разницы между любыми двумя Git деревьями.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git commit&lt;/strong&gt; берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git rm&lt;/strong&gt; используется в Git для удаления файлов из индекса и рабочей копии.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git mv&lt;/strong&gt;  —  это всего лишь удобный способ переместить файл, а затем выполнить git add для нового файла и git rm для старого.&lt;/p&gt;
&lt;p&gt;Команда &lt;strong&gt;git clean&lt;/strong&gt; используется для удаления мусора из рабочего каталога.&lt;/p&gt;
&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Мы разобрали базовые знания о том, что представляет из себя Система управления версиями и Git. Я постаралась собрать всю самую важную информацию и изложить ее как можно более сжато и кратко. Git довольно сложен, и в нем есть еще много функций&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
